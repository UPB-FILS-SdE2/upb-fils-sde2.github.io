"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2210],{8453:(e,s,i)=>{i.d(s,{R:()=>d,x:()=>l});var t=i(6540);const n={},r=t.createContext(n);function d(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(r.Provider,{value:s},e.children)}},9207:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>u,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tp/05","title":"TP 05 - Fichiers et descripteurs de fichiers","description":"Utilisation des descripterus de fichers et dup2","source":"@site/docs/tp/05.md","sourceDirName":"tp","slug":"/tp/05","permalink":"/docs/tp/05","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-FILS-SdE2/upb-fils-sde2.github.io/edit/main/docs/tp/05.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"description":"Utilisation des descripterus de fichers et dup2"},"sidebar":"tutorialSidebar","previous":{"title":"TP 04 - Processus et le type Box","permalink":"/docs/tp/04"},"next":{"title":"Devoir","permalink":"/docs/category/devoir"}}');var n=i(4848),r=i(8453);const d={sidebar_position:5,description:"Utilisation des descripterus de fichers et dup2"},l="TP 05 - Fichiers et descripteurs de fichiers",u={},c=[{value:"Resources",id:"resources",level:2},{value:"Linux Standard Streams",id:"linux-standard-streams",level:2},{value:"Les appels syst\xe8me dup et dup2",id:"les-appels-syst\xe8me-dup-et-dup2",level:2},{value:"dup",id:"dup",level:3},{value:"dup2",id:"dup2",level:3},{value:"Redirections",id:"redirections",level:3}];function o(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"tp-05---fichiers-et-descripteurs-de-fichiers",children:"TP 05 - Fichiers et descripteurs de fichiers"})}),"\n",(0,n.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://doc.rust-lang.org/std/fs/struct.OpenOptions.html",children:"OpenOptions"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://doc.rust-lang.org/std/io/fn.stdin.html",children:"Stdin"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://doc.rust-lang.org/std/io/fn.stdout.html",children:"Stdout"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.rs/nix/0.23.1/nix/unistd/fn.dup.html",children:"dup"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.rs/nix/0.23.1/nix/unistd/fn.dup2.html",children:"dup2"})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"linux-standard-streams",children:"Linux Standard Streams"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"stdin"})," est le flux d'entr\xe9e standard. Cela accepte le texte comme entr\xe9e. La sortie texte de la commande au shell est transmise via le flux ",(0,n.jsx)(s.code,{children:"stdout"})," (sortie standard). Les messages d'erreur de la commande sont envoy\xe9s via le flux ",(0,n.jsx)(s.code,{children:"stderr"})," (erreur standard)."]}),"\n",(0,n.jsxs)(s.p,{children:["Vous pouvez donc voir qu'il existe deux flux de sortie, ",(0,n.jsx)(s.code,{children:"stdout"})," et ",(0,n.jsx)(s.code,{children:"stderr"}),", et un flux d'entr\xe9e, ",(0,n.jsx)(s.code,{children:"stdin"}),". \xc9tant donn\xe9 que les messages d'erreur et la sortie normale ont chacun leur propre conduit pour les acheminer vers la fen\xeatre du terminal, ils peuvent \xeatre trait\xe9s ind\xe9pendamment les uns des autres."]}),"\n",(0,n.jsxs)(s.p,{children:["Les flux sous Linux, comme presque tout le reste, sont trait\xe9s comme s'ils \xe9taient des ",(0,n.jsx)(s.strong,{children:"fichiers"}),". Vous pouvez lire du texte \xe0 partir d'un fichier et vous pouvez \xe9crire du texte dans un fichier. Ces deux actions impliquent un flux de donn\xe9es. Ainsi, le concept de traitement d'un flux de donn\xe9es en tant que fichier n'est pas si exag\xe9r\xe9."]}),"\n",(0,n.jsx)(s.admonition,{type:"note",children:(0,n.jsxs)(s.p,{children:["Chaque instance d'un fichier ouvert associ\xe9 \xe0 un processus se voit attribuer un ",(0,n.jsx)(s.strong,{children:"num\xe9ro unique"})," pour l'identifier. C'est ce qu'on appelle le ",(0,n.jsx)(s.strong,{children:"descripteur de fichier"}),". Chaque fois qu'une action doit \xeatre effectu\xe9e sur un fichier, le descripteur de fichier est utilis\xe9 pour identifier le fichier."]})}),"\n",(0,n.jsx)(s.p,{children:"Ces valeurs sont toujours utilis\xe9es pour stdin, stdout et stderr :"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"0: stdin"}),"\n",(0,n.jsx)(s.li,{children:"1: stdout"}),"\n",(0,n.jsx)(s.li,{children:"2: stderr"}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"les-appels-syst\xe8me-dup-et-dup2",children:"Les appels syst\xe8me dup et dup2"}),"\n",(0,n.jsx)(s.h3,{id:"dup",children:"dup"}),"\n",(0,n.jsxs)(s.p,{children:["L'appel syst\xe8me ",(0,n.jsx)(s.code,{children:"dup()"})," cr\xe9e ",(0,n.jsx)(s.strong,{children:"une copie"})," d'un descripteur de fichier."]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Il utilise le descripteur inutilis\xe9 portant le num\xe9ro le plus bas pour le nouveau descripteur."}),"\n",(0,n.jsx)(s.li,{children:"Si la copie est cr\xe9\xe9e avec succ\xe8s, les descripteurs de fichier d'origine et de copie peuvent \xeatre utilis\xe9s de mani\xe8re interchangeable."}),"\n",(0,n.jsx)(s.li,{children:"Ils se r\xe9f\xe8rent tous les deux au m\xeame descripteur de fichier ouvert et partagent donc les indicateurs de d\xe9calage de fichier et d'\xe9tat de fichier."}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"dup2",children:"dup2"}),"\n",(0,n.jsxs)(s.p,{children:["L'appel syst\xe8me ",(0,n.jsx)(s.code,{children:"dup2()"})," est similaire \xe0 ",(0,n.jsx)(s.code,{children:"dup()"})," mais la diff\xe9rence fondamentale entre eux est qu'au lieu d'utiliser le descripteur de fichier inutilis\xe9 portant le num\xe9ro le plus bas, il utilise le num\xe9ro de descripteur ",(0,n.jsx)(s.strong,{children:"sp\xe9cifi\xe9 par l'utilisateur"}),"."]}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["Lors de l'appel de ",(0,n.jsx)(s.a,{href:"https://docs.rs/nix/0.23.1/nix/unistd/fn.dup2.html",children:"dup2"})," dans Rust, les param\xe8tres donn\xe9s doivent \xeatre l'ancien descripteur de fichier et le nouveau."]})}),"\n",(0,n.jsx)(s.h3,{id:"redirections",children:"Redirections"}),"\n",(0,n.jsxs)(s.p,{children:["Quand vous voulez rediriger ",(0,n.jsx)(s.code,{children:"stdout"})," vers un fichier vous pouvez le faire en ouvrant un fichier \xe0 l'aide de l'appel syst\xe8me ",(0,n.jsx)(s.code,{children:"open()"}),", puis en dupliquant ce descripteur de fichier sur ",(0,n.jsx)(s.code,{children:"stdout"})," en utilisant ",(0,n.jsx)(s.code,{children:"dup2()"}),", de sorte que la sortie standard soit maintenant repr\xe9sent\xe9e par le fichier ouvert et non par la console."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'use std::fs::File;\nuse std::io::{self, Write};\nuse std::os::unix::io::AsRawFd;\n\nfn main() -> io::Result<()> {\n    // Open a file to redirect stdout\n    let file = File::open("test.txt")?;\n\n    // Get the raw file descriptor\n    let fd = file.as_raw_fd();\n\n    // Redirect stdout to the file\n    unsafe {\n        libc::dup2(fd, libc::STDOUT_FILENO);\n    }\n\n    // Anything printed to stdout will be redirected to the file\n    println!("Hello, redirected stdout!");\n\n    Ok(())\n}\n'})})]})}function a(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}}}]);