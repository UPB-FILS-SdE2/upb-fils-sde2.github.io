"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5002],{5058:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>u,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"tp/06","title":"TP 06 - Communication Entre Processus","description":"Utilisation des pipes","source":"@site/docs/tp/06.md","sourceDirName":"tp","slug":"/tp/06","permalink":"/docs/tp/06","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-FILS-SdE2/upb-fils-sde2.github.io/edit/main/docs/tp/06.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"description":"Utilisation des pipes"},"sidebar":"tutorialSidebar","previous":{"title":"TP 05 - Fichiers et descripteurs de fichiers","permalink":"/docs/tp/05"},"next":{"title":"Devoir","permalink":"/docs/category/devoir"}}');var r=n(4848),t=n(8453);const c={sidebar_position:6,description:"Utilisation des pipes"},u="TP 06 - Communication Entre Processus",l={},a=[{value:"Resources",id:"resources",level:2},{value:"Pipe",id:"pipe",level:2},{value:"Suggestions",id:"suggestions",level:2},{value:"Exercises",id:"exercises",level:2}];function o(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"tp-06---communication-entre-processus",children:"TP 06 - Communication Entre Processus"})}),"\n",(0,r.jsx)(s.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://docs.rs/nix/latest/nix/unistd/fn.pipe.html",children:"Pipe"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"pipe",children:"Pipe"}),"\n",(0,r.jsxs)(s.p,{children:["Une ",(0,r.jsx)(s.code,{children:"pipe"}),"  est une forme de ",(0,r.jsx)(s.em,{children:"redirection"})," (transfert de la sortie standard vers une autre destination) qui est utilis\xe9e dans Linux et d'autres syst\xe8mes d'exploitation de type Unix pour envoyer la sortie d'une commande/programme/processus \xe0 une autre commande/programme/processus pour un traitement ult\xe9rieur ."]}),"\n",(0,r.jsxs)(s.p,{children:["Le canal est un m\xe9canisme de communication \xe0 sens unique entre deux processus. Dans la plupart des impl\xe9mentations UNIX, un canal appara\xeet comme une zone m\xe9moire d'une certaine taille dans l'espace du noyau. Les processus qui communiquent via un canal anonyme doivent avoir un certain degr\xe9 de parent\xe9; g\xe9n\xe9ralement, un processus qui cr\xe9e un pipe sera alors appel\xe9 une ",(0,r.jsx)(s.code,{children:"fork"}),", et le pipe sera utilis\xe9 pour la communication parent-enfant. Dans tous les cas, les processus qui communiquent via des canaux anonymes ne peuvent pas \xeatre cr\xe9\xe9s par diff\xe9rents utilisateurs du syst\xe8me."]}),"\n",(0,r.jsx)(s.p,{children:"Pipe est utilis\xe9 pour combiner deux commandes ou plus, et dans ce cas, la sortie d'une commande agit comme entr\xe9e d'une autre commande, et la sortie de cette commande peut servir d'entr\xe9e pour la commande suivante et ainsi de suite. Il peut \xe9galement \xeatre visualis\xe9 comme une connexion temporaire entre deux ou plusieurs commandes/programmes/processus."}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:["Exemple d'utilisation de pipes en Rust: ",(0,r.jsx)(s.a,{href:"https://doc.rust-lang.org/rust-by-example/std_misc/process/pipe.html",children:"pipe"}),"."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-rust",children:"use nix::unistd::pipe;\n \nfn main() {\n \n    let (fdw0, fdw1) = pipe().unwrap();\n \n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Le tuple ",(0,r.jsx)(s.code,{children:"(fdw0, fdw1)"})," contient apr\xe8s l'ex\xe9cution de la fonction ",(0,r.jsx)(s.strong,{children:"2"})," descripteurs de fichiers:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"fdw0"}),"ouvert \xe0 la lecture"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"fdw1"}),"ouvert pour l'\xe9criture"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["La sortie de ",(0,r.jsx)(s.code,{children:"fdw1"})," est consid\xe9r\xe9e comme une entr\xe9e pour ",(0,r.jsx)(s.code,{children:"fdw0"})," ."]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["la lecture / \xe9criture depuis / vers les canaux est atomique si vous ne lisez / \xe9crivez pas plus de ",(0,r.jsx)(s.code,{children:"PIPE_BUF"})," octets."]}),"\n",(0,r.jsxs)(s.li,{children:["la lecture / \xe9criture depuis / vers les pipes se fait \xe0 l'aide des fonctions ",(0,r.jsx)(s.code,{children:"stdin().read_line()"})," / ",(0,r.jsx)(s.code,{children:"stdout().write()"})]}),"\n"]})}),"\n",(0,r.jsxs)(s.p,{children:["La plupart des applications qui utilisent des pipes ferment dans chacun des processus l'extr\xe9mit\xe9 du pipe ",(0,r.jsx)(s.strong,{children:"inutilis\xe9"})," en communication unidirectionnelle. Si l'un des descripteurs est ferm\xe9, les r\xe8gles s'appliquent:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["une lecture \xe0 partir d'un canal pour lequel le ",(0,r.jsx)(s.strong,{children:"descripteur d'\xe9criture"})," a \xe9t\xe9 ferm\xe9, apr\xe8s que toutes les donn\xe9es ont \xe9t\xe9 lues, renverra ",(0,r.jsx)(s.code,{children:"0"})," , indiquant la fin du fichier. Le descripteur d'\xe9criture peut \xeatre dupliqu\xe9 afin que plusieurs processus puissent \xe9crire dans le canal. Habituellement, dans le cas des canaux anonymes, il n'y a que deux processus, l'un qui \xe9crit et l'autre qui lit, tandis que dans le cas des fichiers de canal nomm\xe9 (FIFO), il peut y avoir plusieurs processus qui \xe9crivent des donn\xe9es."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["une \xe9criture dans un pipe pour lequel le descripteur ",(0,r.jsx)(s.strong,{children:"read"})," a \xe9t\xe9 ferm\xe9 provoque la g\xe9n\xe9ration du signal ",(0,r.jsx)(s.code,{children:"SIGPIPE"})," . Si le signal est captur\xe9 et revient de la routine de traitement, la fonction syst\xe8me \xe9criture renvoie une erreur et la variable ",(0,r.jsx)(s.code,{children:"errno"})," a la valeur ",(0,r.jsx)(s.strong,{children:"EPIPE"})," ."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"warning",children:(0,r.jsxs)(s.p,{children:["L'erreur ",(0,r.jsx)(s.strong,{children:"la plus courante"})," , lorsque vous travaillez avec des pipes, vient de la n\xe9gligence du fait que ",(0,r.jsx)(s.code,{children:"EOF"})," n'est pas envoy\xe9 \xe0 travers les pipes (la lecture des pipes ne se termine pas) \xe0 moins que toutes les extr\xe9mit\xe9s ",(0,r.jsx)(s.strong,{children:"ne soient ferm\xe9es"}),". ",(0,r.jsx)(s.strong,{children:"TOUS"})," les processus qui ont ouvert le descripteur de pipe (dans le cas d'une fork, assurez-vous de fermer les extr\xe9mit\xe9s du pipe dans le processus parent)."]})}),"\n",(0,r.jsx)(s.h2,{id:"suggestions",children:"Suggestions"}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsx)(s.p,{children:"Transformer un String en &[u8] peut \xeatre fait en utilisant"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-rust",children:"s.as_bytes()\n"})})]}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsxs)(s.p,{children:["Transformer un descripteur de fichier en ",(0,r.jsx)(s.code,{children:"File"})," peut \xeatre fait en utilisant"]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-rust",children:"let mut f = unsafe { fs::File::from_raw_fd(fd) };\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"exercises",children:"Exercises"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\xc9crivez un programme qui cr\xe9e un pipe et un processus (processus enfant en utlisant ",(0,r.jsx)(s.a,{href:"https://docs.rs/nix/0.26.2/nix/unistd/fn.fork.html",children:"fork"}),"). Du parent, lisez \xe0 partir du clavier un message et envoyez-le par le canal \xe0 l'enfant. Apres ca, inversez le message dans l'enfant et envoyez-le au parent."]}),"\n",(0,r.jsxs)(s.li,{children:["\xc9crivez un programme qui cr\xe9e un pipe et un processus (un processus enfant en utlisant ",(0,r.jsx)(s.a,{href:"https://docs.rs/nix/0.26.2/nix/unistd/fn.fork.html",children:"fork"}),"). Le processus enfant redirige son ecran vers le pipe et ex\xe9cute ls -l. Le processus parent lit la sortie de l'enfant \xe0 partir du pipe et l'affiche."]}),"\n",(0,r.jsxs)(s.li,{children:["\xc9crivez un programme qui cr\xe9e un pipe et 2 processus (deux processus enfant en utlisant ",(0,r.jsx)(s.a,{href:"https://docs.rs/nix/0.26.2/nix/unistd/fn.fork.html",children:"fork"})," doix fois). Le premier enfant ex\xe9cute ",(0,r.jsx)(s.code,{children:"ls -l"})," et le deuxi\xe8me enfant ex\xe9cute ",(0,r.jsx)(s.code,{children:"grep src"}),". Le parent connecte l'affichage du premier enfant au clavier du deuxi\xe8me enfant avec un pipe."]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>u});var i=n(6540);const r={},t=i.createContext(r);function c(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function u(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);